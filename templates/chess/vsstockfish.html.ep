% layout 'dashboard';

% title 'Analyse';

<script src="https://cdnjs.cloudflare.com/ajax/libs/chess.js/0.10.2/chess.js"></script>
<script src="/chessboardjs/js/chessboard-0.3.0.js"></script>
<link rel="stylesheet" href="/chessboardjs/css/chessboard-0.3.0.css" />

<script src="/dashboard/js/plugins/bootstrap-slider/bootstrap-slider.js"></script>
<link rel="stylesheet" href="/dashboard/css/bootstrap-slider/slider.css" />

<link rel="stylesheet" href="/dashboard/css/ionslider/ion.rangeSlider.css">
<link rel="stylesheet" href="/dashboard/css/ionslider/ion.rangeSlider.skinNice.css">
<script src="/dashboard/js/plugins/ionslider/ion.rangeSlider.js"></script>

<script>

  var board, game = new Chess();
  var p;

  // do not pick up pieces if the game is over only pick up pieces for White
  var onDragStart = function(source, piece, position, orientation) {
    if (game.in_checkmate() === true || game.in_draw() === true ||
      piece.search(/^b/) !== -1) {
      return false;
    }
  };
  
  var makeRandomMove = function() {
    var possibleMoves = game.moves();
  
    // game over
    if (possibleMoves.length === 0) { 
      $('#pgn').val(game.pgn({ max_width: 5, newline_char: '\n' })); 
      return;
    }
  
    var randomIndex = Math.floor(Math.random() * possibleMoves.length);
    game.move(possibleMoves[randomIndex]);
    board.position(game.fen());
    $('#pgn').val(game.pgn({ max_width: 5, newline_char: '\n' })); 
    //sendMessage(JSON.stringify('uci - position - ' + game.pgn()));
  };
  
  var onDrop = function(source, target) {
    // see if the move is legal
    var move = game.move({
      from: source,
      to: target,
      promotion: 'q' // NOTE: always promote to a queen for example simplicity
    });
  
    // illegal move
    if (move === null) return 'snapback';
  
    // make random legal move for black
    // window.setTimeout(makeRandomMove, 250);
  };

  // update the board position after the piece snap for castling, en passant, pawn promotion
  var onSnapEnd = function() {
    board.position(game.fen());
    //ws.send(JSON.stringify(game.fen()));
    sendMessage(JSON.stringify('uci - position - ' + game.pgn()));
  };

  var init = function() {

    var cfg = {
      draggable: true,
      position: 'start',
      onDragStart: onDragStart,
      onDrop: onDrop,
      onSnapEnd: onSnapEnd
    };

    board = ChessBoard('board', cfg);

    setupWebSocket(1);
    setupStockfish();
  }

  $(document).ready(init);

  function setupStockfish() {
      sendMessage(JSON.stringify('uci - uci'));
      sendMessage(JSON.stringify('uci - isready'));
      sendMessage(JSON.stringify('uci - ucinewgame'));
  }

  function setupWebSocket(firsttime){

    var url = '<%= url_for('chess/vsstockfish/ws')->to_abs %>';
    url = url.replace('http','ws');
    ws = new WebSocket( url );

    // get from server
    ws.onmessage = function(e){
      
      var point = JSON.parse(e.data);
      $('#io').append(point.data + "\n"); 
      $('#io').scrollTop($('#io')[0].scrollHeight);

      // get centipawn advantage
      var myRegExpCp = / cp (-?\d{1,3}) /;
      var match = myRegExpCp.exec(point.data + '\n');
      if (match != null) {
          centipawn = match[1];
          console.log('CENTIPWN: ' + centipawn);
          var percent = (centipawn-(-1200))*100/(1200-(-1200));
          p = Math.round(percent);
          if (p > 100) { p = 100; }
          if (p < 0) { p = 0; }
          p = p + '%';
      }

      // move black peices
      var myRegExpPonder = / (\w\d\w\d) ponder \w\d\w\d/;
      var match = myRegExpPonder.exec(point.data);
      if (match != null && match[1].length === 4) {
        var from = match[1].substring(0,2);
        var to   = match[1].substring(2,5);
        var object_literal = { from: from, to: to  }; 
        game.move(object_literal); 
        board.position(game.fen());
        $('#pgn').val(game.pgn({ max_width: 5, newline_char: '\n' })); 
          console.log('PERC: ' + p);
          $(".progress-bar-centipawn").animate({
            height: p
          }, 100);
        return;
      }
      var myRegExpBestmove = /^ (\w\d\w\d)/;
      var match = myRegExpBestmove.exec(point.data);
      if (match != null && match[1].length === 4) {
        var from = match[1].substring(0,2);
        var to   = match[1].substring(2,5);
        var object_literal = { from: from, to: to  }; 
        game.move(object_literal); 
        board.position(game.fen());
        $('#pgn').val(game.pgn({ max_width: 5, newline_char: '\n' })); 
          console.log('PERC: ' + p);
          $(".progress-bar-centipawn").animate({
            height: p
          }, 100);
        return;
      }
    };

    // on connection
    ws.onopen = function(e) {
      if (firsttime) {
        ws.send(JSON.stringify('Hello server'));
      }
    }

    // open a new one when closed
    ws.onclose = function(){
      setTimeout(setupWebSocket(0), 1000);
    };

  }

  function sendMessage(msg){
    // Wait until the state of the socket is not ready and send the message when it is...
    waitForSocketConnection(ws, function(){
      ws.send(msg);
    });
  }

  // Make the function wait until the connection is made...
  function waitForSocketConnection(socket, callback){
    setTimeout(
        function () {
            if (socket.readyState === 1) {
                console.log("new connection made")
                if(callback != null){
                    callback();
                }
                return;

            } else {
                console.log("waiting for connection...")
                waitForSocketConnection(socket, callback);
            }

        }, 5); // wait 5 milisecond for the connection...
  }

</script>


<div class="row">


  <div class="col-xs-5">
    <div class="box box-primary">
      <div class="box-body">

        <div class="row">

            <div class="col-xs-11">
              <div id="board" style="width: 410px; height=300px;"></div>
            </div>

            <div class="col-xs-1">
<style>
.progress {background: rgba(0, 0, 0, 1); border: 0px solid rgba(245, 245, 245, 1); border-radius: 0px; height: 10px;}
.progress-bar-centipawn {background: rgba(219, 219, 219, 1);}
</style>

  <div class="progress vertical progress-xs" style="padding-right: 10px; height: 412px;">
  <div class="progress-bar progress-bar-centipawn" role="progressbar" aria-valuenow="-500" aria-valuemin="-1500" aria-valuemax="1500" style="height: 50%">
  </div>
  </div>

            </div>

        </div>

      </div>
    </div>
  </div>

  <div class="col-xs-7">
    <div class="box box-primary">
    <div class="box-body">
    <div class="nav-tabs-custom">
      <ul class="nav nav-tabs">
        <li class="active"><a href="#tab_1" data-toggle="tab">Stockfish</a></li>
        <li><a href="#tab_2" data-toggle="tab">PGN</a></li>
        <li><a href="#tab_3" data-toggle="tab">IO</a></li>
        <li><a href="#tab_4" data-toggle="tab">Chart</a></li>
      </ul>
      <div class="tab-content">

        <div class="tab-pane active" id="tab_1">
        
<!--- TAB ONE --->

          <div class="box box-default">
            <div class="box-body">

              <p><span>Threads : <span id="slider1val">2</span><center><input id="slider1" style="width: 85% !important; background: green;" type="text" data-slider-min="1" data-slider-max="4" data-slider-step="1" data-slider-value="2"/></center></span></p>

              <br>
          
              <p>Hash (MB) : <span id="slider2val">2048</span><center><input id="slider2" style="width: 85% !important; background: green;" type="text" data-slider-min="1" data-slider-max="4096" data-slider-step="1" data-slider-value="2048"/></center></span> </p>

              <br>
          
              <p>Contempt : <span id="slider3val">0</span><center><input id="slider3" style="width: 85% !important; background: green;" type="text" data-slider-min="-100" data-slider-max="100" data-slider-step="1" data-slider-value="0"/></center></span> </p>

              <br>
          
              <p>Skill : <span id="slider4val">10</span><center><input id="slider4" style="width: 85% !important; background: green;" type="text" data-slider-min="0" data-slider-max="20" data-slider-step="1" data-slider-value="10"/></center></span> </p>

              <script>
                  $("#slider1").slider();
                  $("#slider1").on("slide", function(slideEvt) {
                      $("#slider1val").text(slideEvt.value);
                  });

                  $("#slider2").slider();
                  $("#slider2").on("slide", function(slideEvt) {
                      $("#slider2val").text(slideEvt.value);
                  });

                  $("#slider3").slider();
                  $("#slider3").on("slide", function(slideEvt) {
                      $("#slider3val").text(slideEvt.value);
                  });

                  $("#slider4").slider();
                  $("#slider4").on("slide", function(slideEvt) {
                      $("#slider4val").text(slideEvt.value);
                  });
              </script>
              <style>
                   .slider-selection {
                      background: #428041;
                  }
                   .slider-handle {
                      background: green;
                  }
              </style>

             </div>
          </div>
        </div>

        <div class="tab-pane" id="tab_2">

<!--- TAB TWO --->

          <div class="form-group">
            <textarea id="pgn" class="form-control" rows="16" style="overflow-x: auto;" readonly></textarea>
          </div>

        </div>

        <div class="tab-pane" id="tab_3">

<!--- TAB THREE --->

          <div class="form-group">
            <textarea id="io" class="form-control" rows="16" style="white-space:pre; overflow-x: auto;" readonly></textarea>
          </div>

        </div>

        <div class="tab-pane" id="tab_4">

<!--- TAB FOUR --->

        </div>



        </div>
      </div>
    </div>
    </div>
    </div>
  </div>
</div>

